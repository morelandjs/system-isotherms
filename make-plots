#!/usr/bin/env python3

from collections import OrderedDict
import argparse
import logging
from pathlib import Path
import subprocess

import h5py
import matplotlib.pyplot as plt
import numpy as np

# new tableau colors
# https://www.tableau.com/about/blog/2016/7/colors-upgrade-tableau-10-56782
colors = OrderedDict([
    ('blue', '#4e79a7'),
    ('orange', '#f28e2b'),
    ('green', '#59a14f'),
    ('red', '#e15759'),
    ('cyan', '#76b7b2'),
    ('purple', '#b07aa1'),
    ('brown', '#9c755f'),
    ('yellow', '#edc948'),
    ('pink', '#ff9da7'),
    ('gray', '#bab0ac')
])

offblack = '.15'

fontsize = dict(
    large=11,
    normal=10,
    small=9,
    tiny=8,
)

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'sans-serif',
    'font.sans-serif': ['Lato'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'sans',
    'mathtext.it': 'sans:italic:medium',
    'mathtext.cal': 'sans',
    'font.size': fontsize['normal'],
    'legend.fontsize': fontsize['normal'],
    'axes.labelsize': fontsize['normal'],
    'axes.titlesize': fontsize['large'],
    'xtick.labelsize': fontsize['small'],
    'ytick.labelsize': fontsize['small'],
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'axes.prop_cycle': plt.cycler('color', list(colors.values())),
    'lines.linewidth': .8,
    'lines.markersize': 3,
    'lines.markeredgewidth': 0,
    'patch.linewidth': .8,
    'axes.linewidth': .6,
    'xtick.major.width': .6,
    'ytick.major.width': .6,
    'xtick.minor.width': .4,
    'ytick.minor.width': .4,
    'xtick.major.size': 3.,
    'ytick.major.size': 3.,
    'xtick.minor.size': 2.,
    'ytick.minor.size': 2.,
    'xtick.major.pad': 3.5,
    'ytick.major.pad': 3.5,
    'axes.labelpad': 4.,
    'axes.formatter.limits': (-5, 5),
    'axes.spines.top': False,
    'axes.spines.right': False,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.frameon': False,
    'image.cmap': 'Blues',
    'image.interpolation': 'none',
})

plotdir = Path('plots')
plotdir.mkdir(exist_ok=True)

plot_functions = {}

trento_map_param = [
    '--normalization {}'.format(20.448),
    '--cross-section {}'.format(7.0),
    '--reduced-thickness {}'.format(0.010533),
    '--fluctuation {}'.format(0.20643),
    '--nucleon-width {}'.format(0.88919),
    '--parton-number {}'.format(6),
    '--parton-width {}'.format(0.41059),
    '--nucleon-min-dist {}'.format(0.83528),
    '--grid-step {} --grid-max {}'.format(0.082118, 15)
]

transport_map_param = []


def plot(f):
    """
    Plot function decorator.  Calls the function, does several generic tasks,
    and saves the figure as the function name.

    """
    def wrapper(*args, **kwargs):
        logging.info('generating plot: %s', f.__name__)
        f(*args, **kwargs)

        fig = plt.gcf()

        plotfile = plotdir / '{}.pdf'.format(f.__name__)
        fig.savefig(str(plotfile))
        logging.info('wrote %s', plotfile)
        plt.close(fig)

    plot_functions[f.__name__] = wrapper

    return wrapper


def figsize(relwidth=1, aspect=.618, refwidth=6):
    """
    Return figure dimensions from a relative width (to a reference width) and
    aspect ratio (default: 1/golden ratio).

    """
    width = relwidth * refwidth
    return width, width*aspect


def set_tight(fig=None, **kwargs):
    """
    Set tight_layout with a better default pad.

    """
    if fig is None:
        fig = plt.gcf()

    kwargs.setdefault('pad', .1)
    fig.set_tight_layout(kwargs)


def run_cmd(*args):
    """
    Run and log a subprocess.
    """
    cmd = ' '.join(args)
    logging.info('running command: %s', cmd)

    try:
        proc = subprocess.run(
            cmd.split(), check=True,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
            universal_newlines=True
        )
    except subprocess.CalledProcessError as e:
        logging.error(
            'command failed with status %d:\n%s',
            e.returncode, e.output.strip('\n')
        )
        raise
    else:
        logging.debug(
            'command completed successfully:\n%s',
            proc.stdout.strip('\n')
        )
        return proc


def trento_mult(system, nevents=10**5):
    """
    Generate trento event attributes with nucleon substructure using
    maximum a posteri parameters at 5.02 TeV.

    """
    grid_max = {'p p': 4, 'p Pb': 7, 'Pb Pb': 10}[system]
    grid_step = 0.2

    cachefile = Path('cache', '{}.npy'.format(''.join(system.split())))
    cachefile.parent.mkdir(parents=True, exist_ok=True)

    if cachefile.exists():
        return np.load(cachefile)

    proc = run_cmd(
        'trento {}'.format(system),
        '--number-events {}'.format(nevents),
        '--normalization {}'.format(20.448),
        '--cross-section {}'.format(7.0),
        '--reduced-thickness {}'.format(0.010533),
        '--fluctuation {}'.format(0.20643),
        '--nucleon-width {}'.format(0.88919),
        '--parton-number {}'.format(6),
        '--parton-width {}'.format(0.41059),
        '--nucleon-min-dist {}'.format(0.83528),
        '--grid-max {} --grid-step {}'.format(grid_max, grid_step),
    )

    mult = np.array(
        [l.split()[3] for l in proc.stdout.splitlines()], dtype=float
    )

    np.save(cachefile, mult)

    return mult


@plot
def mult_dist():
    """
    Histogram p-p, p-Pb, and Pb-Pb integrated reduced thickness function,
    which is roughly proportional to the final charged particle multiplicity.

    """
    plt.figure(figsize=figsize(.6))
    bins = np.linspace(0, 300, 100)
    const_dsdy = 100

    for system in ['p p', 'p Pb', 'Pb Pb']:
        dsdy = trento_mult(system)
        cent = '{0:.3f}%'.format(100*sum(dsdy > const_dsdy)/dsdy.size)
        label = '{}, {}'.format('-'.join(system.split()), cent)
        plt.hist(dsdy, bins=bins, histtype='step', label=label)

    plt.axvline(100, dashes=(4, 2), color=offblack)

    plt.xlabel('$dS/dy$')
    plt.xlim(0, 300)
    plt.ylabel('Events')
    plt.ylim(1, 10**5)
    plt.yscale('log')

    plt.title('MAP parameters $\sqrt{s_{NN}}=5.02$ TeV')
    leg = plt.legend(
        title='system, centrality',
        fontsize=fontsize['small'],
        borderaxespad=0
    )
    plt.setp(leg.get_title(), fontsize=fontsize['small'])
    set_tight()


def main():
    logging.basicConfig(level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
